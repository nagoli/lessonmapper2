

PARSER_BEGIN(SuggestionParser)

package lessonMapper.diffusion.suggestion;

import java.io.StringReader;



public class SuggestionParser {

  private static int count=0;

}

PARSER_END(SuggestionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{

  < max: "max">
|
  < min: "min">
|
  < union: "union">
|
  < inter: "intersection">
|
  < sum: "+">
|
  < div: "/">
|
  < prod: "*">
|
  < sub: "-">
|
  < MAX: "MAX">
|
  < MIN: "MIN">
|
  < UNION: "UNION">
|
  < INTER: "INTERSECTION">
|
  < SUM: "SUM">
|
  < DIV: "DIVISION">
|
  < PROD: "PRODUCT">
|
  < SUB: "SUBTRACTION">
|
  < VI: "vi">
|
  < LI: "li">
|
  < eq: "=">
|
  < inf: "<">
|
   < inf_eq: "<=">
 |
   < sup: ">">
 |
   < sup_eq: ">=">
 |
   < dif: "!=">
 |
   < contains: "contains">
 |
   < contained: "contained">
|
   < OR: "or">
 |
   < AND: "and">
 |
  < STRING: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_",",","0"-"9"] )* >
|
  < ATT_ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","/","0"-"9"] )* >
|
  < NUM:  (["0"-"9"])+ >
}


void  Heuristic(SuggestionHeuristicBuilder aBuilder) :
{
   String s;
}
{
   { count = 0;}
   s=FinalEquationAdd(aBuilder)  <EOF>
   { aBuilder.setFinalStatement("return "+s+";");
   }
}

String RecurrentStatement(SuggestionHeuristicBuilder aBuilder) :
{
  String op;
  String eq;
  String cond=null;
}
{
   op=RecursiveOperator() [ "[" cond=Condition() "]" ] "(" eq=EquationAdd() ")"
   {
   String id = "recurs"+count++;
   aBuilder.addField("public lessonMapper.lom.LOMValue "+id+";");
   String theRecurrentStatement = "if ("+id+" == null) "+id+"= "+eq+"; \n"+
      "else "+id+" = "+id+"."+op+"("+eq+");";
   if (cond != null) theRecurrentStatement = "if ("+cond+"){\n"
         +theRecurrentStatement+  "}";
   aBuilder.addRecurrentStatement(theRecurrentStatement);
   return id;
   }
}

String Condition() :
{
String s;
String l=null;
String c=null;
}
{
  s=SimpleCondition() [l=LogicOperator() c=Condition()]
  {
  if (l!=null) return s+l+c;
   return s; }
}

String SimpleCondition() :
{
String e1;
String c;
String e2;

}
{
   LOOKAHEAD(EquationAdd() ConditionOperator())
   e1=EquationAdd() c=ConditionOperator() (e2=EquationAdd())
   {return e1+"."+c+"("+e2+")";}
   |
   "(" c=Condition() ")" {return "("+c+")";}
}

String ConditionOperator() :
{
}
{
   <eq> {return "equals";}
|
   <inf> {return "inferior";}
|
   <inf_eq> {return "inferiorOrEqual";}
 |
   <sup> {return "superior";}
 |
   <sup_eq> {return  "superiorOrEqual";}
 |
   <dif> {return  "different";}
   |
   <contains> {return  "contains";}
   |
   <contained> {return  "contained";}
}

String String() :
{
 Token id;
}
{
  "'" id=<STRING> "'"
  { return "new lessonMapper.lom.LOMValueSet(\"" + id.image + "\",null)"; }
}

String LogicOperator() :
{
}
{
      <OR> {return " || ";}
    |
      <AND> {return " && ";}
}

String Attribute() :
{
 Token id;
}
{
  id=<ATT_ID>
  { return "lessonMapper.lom.LOMAttribute.getLOMAttribute(\""+id.image+"\")"; }
}

String RecursiveOperator() :
{
}
{
   <MAX> {return "max";}
   | <MIN> {return "min";}
   | <UNION> {return "union";}
   | <INTER> {return "intersection";}
   | <SUM>  {return "sum";}
   | <DIV> {return "division";}
   | <PROD> {return "product";}
   | <SUB> {return "subtraction";}
}

String AdditiveOperator() :
{
}
{
    <union> {return "union";}
   | <inter> {return "intersection";}
   | <sum>  {return "sum";}
   | <sub> {return "subtraction";}
}

String MultiplicativeOperator() :
{
}
{
     <div> {return "division";}
   | <prod> {return "product";}
}



String EquationAdd() :
{
String theCall;
String op;
String e2;
}
{
    theCall=EquationMul()
    (
    op=AdditiveOperator() e2=EquationMul()
    {
    theCall+="."+op+"("+e2+")";
    }
    )*
    {return theCall;}

}


String EquationMul() :
{
String theCall;
String op;
String e2;
}
{
    theCall=EquationUni()
    (
    op=MultiplicativeOperator() e2=EquationUni()
    {
    theCall+="."+op+"("+e2+")";
    }
    )*
    {return theCall;}


}

String EquationUni() :
{
String e1;
String e2;
String n;
String att;
String s;
}
{
    <max> "(" e1=EquationAdd() "," e2=EquationAdd() ")"
    {return e1+".max("+e2+")";}
   |  <min> "(" e1=EquationAdd() "," e2=EquationAdd() ")"
    {return e1+".min("+e2+")";}
   | n=Numeric() { return n;}
   | s=String() { return s;}
   | <VI> {return "vi";}
   | <LI> "." att=Attribute() {
        return "lessonMapper.diffusion.Diffusion.SugVal(li,"+att+")";}
   |"(" e1=EquationAdd() ")"
          {return e1;}
}


String Numeric() :
{
Token t;
boolean isPositive=true;
}
{
  [ "-" {isPositive=false;} ] t=<NUM>
  {
  String theNum = "";
  if (!isPositive) theNum+="-";
  theNum += t.image;
  return "new lessonMapper.lom.LOMValueInt("+theNum+",null)" ;}
}




String FinalEquationAdd(SuggestionHeuristicBuilder aBuilder) :
{
String theCall;
String op;
String e2;
}
{
    theCall=FinalEquationMul(aBuilder)
    (
    op=AdditiveOperator() e2=FinalEquationMul(aBuilder)
    {
    theCall+="."+op+"("+e2+")";
    }
    )*
    {return theCall;}

}

String FinalEquationMul(SuggestionHeuristicBuilder aBuilder) :
{
String theCall;
String op;
String e2;
}
{
    theCall=FinalEquationUni(aBuilder)
    (
    op=MultiplicativeOperator() e2=FinalEquationUni(aBuilder)
    {
    theCall+="."+op+"("+e2+")";
    }
    )*
    {return theCall;}

}

String FinalEquationUni(SuggestionHeuristicBuilder aBuilder) :
{
String id;
String n;
String e1;
String e2;
String s;
}
{    <max> "(" e1=FinalEquationAdd(aBuilder) "," e2=FinalEquationAdd(aBuilder) ")"
    {return e1+".max("+e2+")";}
   |  <min> "(" e1=FinalEquationAdd(aBuilder) "," e2=FinalEquationAdd(aBuilder) ")"
    {return e1+".min("+e2+")";}
   | id=RecurrentStatement(aBuilder) {return id;}
   | s=String() { return s;}
   | n=Numeric() { return n;}
    |
    "(" e1=FinalEquationAdd(aBuilder)
    ")"
    {return e1;}
}

