/* Generated By:JavaCC: Do not edit this line. SuggestionParserTokenManager.java */
package lessonMapper.diffusion.suggestion;


/**
 * 
 */
@SuppressWarnings("all")


public class SuggestionParserTokenManager implements SuggestionParserConstants
{
  
  /**
   * 
   */
  public static  java.io.PrintStream debugStream = System.out;
  
  /**
   * 
   * 
   * @param ds 
   */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }

/**
 * 
 * 
 * @param active0 
 * @param pos 
 * 
 * @return 
 */
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e07fe1e0L) != 0L)
         {
            jjmatchedKind = 33;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x80600000L) != 0L)
            return 4;
         if ((active0 & 0x1601fe1e0L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x601d8180L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
            return 4;
         }
         if ((active0 & 0x100026060L) != 0L)
            return 4;
         return -1;
      case 3:
         if ((active0 & 0x601d8180L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x8080L) != 0L)
            return 4;
         if ((active0 & 0x601d0100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x601d0100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x80000L) != 0L)
            return 4;
         if ((active0 & 0x60150100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x20040000L) != 0L)
            return 4;
         if ((active0 & 0x40110100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x110100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 8;
            return 4;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 4;
         return -1;
      case 9:
         if ((active0 & 0x110100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 9;
            return 4;
         }
         return -1;
      case 10:
         if ((active0 & 0x10100L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 10;
            return 4;
         }
         if ((active0 & 0x100000L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}

/**
 * 
 * 
 * @param active0 
 * @param pos 
 * 
 * @return 
 */
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}

/**
 * 
 * 
 * @param kind 
 * @param pos 
 * 
 * @return 
 */
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}

/**
 * 
 * 
 * @param kind 
 * @param pos 
 * @param state 
 * 
 * @return 
 */
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}

/**
 * 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 39:
         return jjStopAtPos(0, 40);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStopAtPos(0, 11);
      case 43:
         return jjStopAtPos(0, 9);
      case 44:
         return jjStopAtPos(0, 41);
      case 45:
         return jjStopAtPos(0, 12);
      case 46:
         return jjStopAtPos(0, 42);
      case 47:
         return jjStopAtPos(0, 10);
      case 60:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 61:
         return jjStopAtPos(0, 23);
      case 62:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x6000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x120000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 91:
         return jjStopAtPos(0, 36);
      case 93:
         return jjStopAtPos(0, 37);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x60000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x60L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}

/**
 * 
 * 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x44000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 105:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 4);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000180L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 77:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 4);
         break;
      case 78:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 4);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 88:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 4);
         break;
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 4);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 120:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 4);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x110000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 4);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 4);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 78:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 4);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 4);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 4);
         break;
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}

/**
 * 
 * 
 * @param old0 
 * @param active0 
 * 
 * @return 
 */
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 4);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}

/**
 * 
 * 
 * @param state 
 */
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}

/**
 * 
 * 
 * @param start 
 * @param end 
 */
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}

/**
 * 
 * 
 * @param state1 
 * @param state2 
 */
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

/**
 * 
 * 
 * @param start 
 * @param end 
 */
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

/**
 * 
 * 
 * @param start 
 */
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}

/**
 * 
 * 
 * @param startState 
 * @param curPos 
 * 
 * @return 
 */
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(0);
                  break;
               case 4:
                  if ((0x3ff800000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(3);
                  }
                  if ((0x3ff100000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(2);
                  }
                  break;
               case 2:
                  if ((0x3ff100000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3ff800000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(3);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(2);
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/**
 * 
 */
static final int[] jjnextStates = {
};

/**
 * 
 */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\155\141\170", "\155\151\156", 
"\165\156\151\157\156", "\151\156\164\145\162\163\145\143\164\151\157\156", "\53", "\57", "\52", 
"\55", "\115\101\130", "\115\111\116", "\125\116\111\117\116", 
"\111\116\124\105\122\123\105\103\124\111\117\116", "\123\125\115", "\104\111\126\111\123\111\117\116", 
"\120\122\117\104\125\103\124", "\123\125\102\124\122\101\103\124\111\117\116", "\166\151", "\154\151", "\75", 
"\74", "\74\75", "\76", "\76\75", "\41\75", "\143\157\156\164\141\151\156\163", 
"\143\157\156\164\141\151\156\145\144", "\157\162", "\141\156\144", null, null, null, "\133", "\135", "\50", "\51", 
"\47", "\54", "\56", };

/**
 * 
 */
public static final String[] lexStateNames = {
   "DEFAULT", 
};

/**
 * 
 */
static final long[] jjtoToken = {
   0x7ffffffffe1L, 
};

/**
 * 
 */
static final long[] jjtoSkip = {
   0x1eL, 
};

/**
 * 
 */
static protected SimpleCharStream input_stream;

/**
 * 
 */
static private final int[] jjrounds = new int[4];

/**
 * 
 */
static private final int[] jjstateSet = new int[8];

/**
 * 
 */
static protected char curChar;

/**
 * 
 * 
 * @param stream 
 */
public SuggestionParserTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/**
 * 
 * 
 * @param stream 
 * @param lexState 
 */
public SuggestionParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}

/**
 * 
 * 
 * @param stream 
 */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}

/**
 * 
 */
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 4; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/**
 * 
 * 
 * @param stream 
 * @param lexState 
 */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/**
 * 
 * 
 * @param lexState 
 */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

/**
 * 
 * 
 * @return 
 */
static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

/**
 * 
 */
static int curLexState = 0;

/**
 * 
 */
static int defaultLexState = 0;

/**
 * 
 */
static int jjnewStateCnt;

/**
 * 
 */
static int jjround;

/**
 * 
 */
static int jjmatchedPos;

/**
 * 
 */
static int jjmatchedKind;

/**
 * 
 * 
 * @return 
 */
public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
